#cloud-config

---
hostname: kumaster
coreos:
  etcd2:
    name: kumaster
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001

    initial-advertise-peer-urls: http://$private_ipv4:2380
    initial-cluster: kumaster=http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
  fleet:
    metadata: role=kumaster
    public-ip: $private_ipv4
  flannel:
    interface: $private_ipv4
  update:
    reboot-strategy: off
  units:
  - name: etcd2.service
    command: start
  - name: fleet.service
    command: start
  - name: flanneld.service
    command: start
    drop-ins:
    - name: 50-network-config.conf
      content: |
        [Unit]
        Requires=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
  - name: docker.service
    command: start
  - name: docker-credentials.service
    content: |
      [Unit]
      Description=Updates .dockercfg file with gcr credentials
      Requires=docker.service
      After=docker.service

      [Service]
      Type=oneshot
      ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
      ExecStartPre=/bin/touch /var/lib/kubelet/.dockercfg
      ExecStart=/usr/bin/docker run --rm -v=/app/credentials/auth-file.json:/token/auth-file.json -v=/var/lib/kubelet/.dockercfg:/token/.dockercfg --name=google_jwt_token hasura/google-jwt-gcr-token
      ExecStop=/bin/bash -c "/usr/bin/docker stop -t 2 google_jwt_token && /usr/bin/docker rm -f google_jwt_token || true"
  - name: docker-credentials.timer
    command: start
    content: |
      [Unit]
      Description=Run gcr credential updater every 50 minutes

      [Timer]
      OnCalendar=*:0/50
  - name: generate-serviceaccount-key.service
    command: start
    content: |
      [Unit]
      Description=Generate service-account key file

      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStart=/bin/openssl genrsa -out /opt/bin/kube-serviceaccount.key 2048 2>/dev/null
      RemainAfterExit=yes
      Type=oneshot
  - name: setup-network-environment.service
    command: start
    content: |
      [Unit]
      Description=Setup Network Environment
      Documentation=https://github.com/kelseyhightower/setup-network-environment
      Requires=network-online.target
      After=network-online.target

      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
      ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
      ExecStart=/opt/bin/setup-network-environment
      RemainAfterExit=yes
      Type=oneshot
  - name: generate-credentials.service
    command: start
    content: |
      [Unit]
      Description=Generate all relevant credentials
      Documentation=https://github.com/kubernetes/kubernetes/blob/master/cluster/saltbase/salt/generate-cert/make-ca-cert.sh
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      Environment="CERT_GROUP=root"
      EnvironmentFile=/etc/network-environment
      ExecStartPre=-/usr/bin/mkdir -p /opt/credentials
      ExecStartPre=/usr/bin/curl -L -o /opt/credentials/make-ca-cert.sh https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/saltbase/salt/generate-cert/make-ca-cert.sh
      ExecStartPre=/usr/bin/chmod +x /opt/credentials/make-ca-cert.sh
      ExecStart=/bin/sh -c '/opt/credentials/make-ca-cert.sh \
        $(curl -s -H Metadata-Flavor:Google http://metadata.google.internal./computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip || echo $DEFAULT_IPV4) \
        IP:10.100.0.1,IP:$(curl -s -H Metadata-Flavor:Google http://metadata.google.internal./computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip || echo $ETH1_IPV4)'
      RemainAfterExit=yes
      Type=oneshot
  - name: kube-apiserver.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service etcd2.service generate-credentials.service
      After=setup-network-environment.service etcd2.service generate-credentials.service

      [Service]
      EnvironmentFile=/etc/network-environment
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-apiserver https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kube-apiserver
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
      ExecStartPre=/opt/bin/wupiao 127.0.0.1:2379/v2/machines
      ExecStart=/opt/bin/kube-apiserver \
      --runtime_config=api/v1 \
      --allow_privileged=true \
      --insecure_bind_address=0.0.0.0 \
      --insecure_port=8080 \
      --kubelet_https=true \
      --secure_port=6443 \
      --service-cluster-ip-range=10.100.0.0/16 \
      --etcd_servers=http://127.0.0.1:2379 \
      --bind-address=${DEFAULT_IPV4} \
      --logtostderr=true \
      --client-ca-file=/srv/kubernetes/ca.crt \
      --tls-cert-file=/srv/kubernetes/server.cert \
      --tls-private-key-file=/srv/kubernetes/server.key \
      --admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
      Restart=always
      RestartSec=10
  - name: kube-controller-manager.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service generate-credentials.service
      After=kube-apiserver.service generate-credentials.service

      [Service]
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-controller-manager https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kube-controller-manager
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
      ExecStart=/opt/bin/kube-controller-manager \
      --master=127.0.0.1:8080 \
      --logtostderr=true \
      --root-ca-file=/srv/kubernetes/ca.crt \
      --service-account-private-key-file=/srv/kubernetes/server.key
      Restart=always
      RestartSec=10
  - name: kube-scheduler.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service
      After=kube-apiserver.service

      [Service]
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-scheduler https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kube-scheduler
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
      ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
      Restart=always
      RestartSec=10
  - name: kube-proxy.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-proxy https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kube-proxy
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
      # wait for kubernetes master to be up and ready
      ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
      ExecStart=/opt/bin/kube-proxy \
      --master=$private_ipv4:8080 \
      --logtostderr=true
      Restart=always
      RestartSec=10
  - name: kube-kubelet.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service docker-credentials.service
      After=setup-network-environment.service docker-credentials.service

      [Service]
      EnvironmentFile=/etc/network-environment
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kubelet
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
      # wait for kubernetes master to be up and ready
      ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
      ExecStart=/opt/bin/kubelet \
      --address=0.0.0.0 \
      --port=10250 \
      --hostname_override=${DEFAULT_IPV4} \
      --api_servers=$private_ipv4:8080 \
      --allow_privileged=true \
      --logtostderr=true \
      --healthz_bind_address=0.0.0.0 \
      --healthz_port=10248
      Restart=always
      RestartSec=10
  - name: kube-dev-kubectl.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Kubectl
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes

      [Service]
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kubectl
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kubectl
      # wait for kubernetes master to be up and ready
      ExecStart=/opt/bin/wupiao $private_ipv4:8080
      RemainAfterExit=yes
      Type=oneshot
write-files:
- path: /etc/conf.d/nfs
  permissions: '0644'
  content: |
    OPTS_RPC_MOUNTD=""
- path: /opt/bin/wupiao
  permissions: '0755'
  content: |
    #!/bin/bash
    # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
    [ -n "$1" ] && \
      until curl -o /dev/null -sIf http://${1}; do \
        sleep 1 && echo .;
      done;
    exit $?
- path: /opt/bin/ws
  permissions: '0755'
  content: |
    #!/bin/bash
    watch -n 1 systemctl status
- path: /opt/bin/wss
  permissions: '0755'
  content: |
    #!/bin/bash
    systemctl status
- path: /app/credentials/auth-file.json
  permissions: '0644'
  content: |
    { "private_key_id": "26ed654d33b78df23782f81f27c6dffa35cf4f3c", "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC4cUdGMmWtEVx5\nC8jA6JaPSqqTkLpS4DOLA554jmddX7hTJciV68OIJob9AXXU/qC0i1rW8KMVjPKm\nQnD+Lzi2l3G/eVR9n74pU+VV8ahoaAI/Sf5vPcviQaWaqOTaQLHhKanJyd2Rsqt/\nwhUhj7B3aywubR/Fih502PI9zLUCiPIW+60dZJp+kCsOevOIs8A469ckw0VMfkZX\nVqG+Q5Au+xeCP6sKQtoTTm2f84vyzWfgrW1gU0xX+72e0pWzmDejKNXFSp+gnzJb\nlAuQ6H4eHulY/jv1iEqsnurbYz0NoaQuiyak/D8Z27orKd7S4rRH8bEcxY3e5KUh\nqdKL9qfhAgMBAAECggEBAKyfUJ7RYjn1ar/bmJt71BXuQvFzXf9c2MC9tV6NoQ5S\nHPis/yvZiZpuvJ4k9LxRR+VSG8XZWDk+Pof+3TP4zDKQUSRskPg2Psr9O0IRt5Vn\n6tqDDT/d7WkoGa9DbVUbgaAD12YFqXrIZxxecFqF2hoaUzJsbXT7jP+9YBMY+TyR\nh+mfC7f5lItyhJxLwoBOrlabj8NWox2wNsy310hhqXnTn84WqfaoaQKVEP+1kh+p\nY7oWBUNd671jWBbi4LG5qvjjO3pDG4fXrEoUUS/F6o+dHsePNi8oNPmPalLWTrm1\n0eoBKBBT1RPuyE1zVMoBpJt+aC27h8sWmIODyqV3ezECgYEA83eMgweLV4hI6kIR\nJLWmEvcPNvtjhXp1t9r4g5FXtK0q/nqDJ479nlJV/dCuckUgGaV4aaZfx3UkwMDd\ni3QMx5k+u1TgFeklFaIVZ40PQEqg74Xd3YC9LDtAvKSeliaTjlS36CYJd1xMJbJk\n8YBu5zg8z1b6ac3o7H27jbig3m0CgYEAwe/k8Ijcb4DUyCSQT5CiCy0PieINg4J4\nMRNI3qfSy5HrK3ECyzAZ6HKPPLVPwI+3Xd416ADXFEzb3WJVWm4c51LqR/4a/SGY\ngRgIsz+flcrP7JMdcKw30kl3TnRV3jlx7ea76KzM+CXJQk7b3U98u/lLP3Q/7AYj\nc7dMp9PytsUCgYEAyOiRQhs6qEvlZ7KHNRTU6/eGTafbM22fsM14oBGTH5x6yy7M\nBhvgPALTxTSsj81tNNywZfaOOSj44DsHVym31gomky3yEQKowJZVNXNY74PmFGIS\neNPgx5xJyqHJ4DwLLbvJWz/wNdgrWjxBQmzql9F3lN3AnQj3Ohhzafq+fW0CgYBZ\nhM1Nhi8SPQp68/207FMQC5WvlKueN5wZMwig1iCEHO/LlpeuiJ584FxjrmGIxg3j\nA04osDKXST73uoshedBXqrs/zfhRPa+ybxCdBNI6B2rgjau6NZRyubybdzGnqSaA\npM+6AAGAzZhPxizQw/8UmWb1fEiBPvggUszMbxYK7QKBgQDZvPTEzxIePYtpT52m\nsGyXCsEEeF5NvZ1CWEDeozv9mSOKOBPZxQTBL1GNDc3vCUrKLK9Xg61cXCPvtBxR\napLFs4LSgPYsGhvMAgawFHjrcoWrNPlFpZvbqZw81qNMbQ/Gd/awcJ/dwnz+pSXn\n54LG00jbcaN0C/F4sITLPGSQXw\u003d\u003d\n-----END PRIVATE KEY-----\n", "client_email": "338104819207-oel57sj9e81qbho5pipfvf32sg5nsu4f@developer.gserviceaccount.com", "client_id": "338104819207-oel57sj9e81qbho5pipfvf32sg5nsu4f.apps.googleusercontent.com", "type": "service_account" }
- path: /opt/custom/fluentd.conf
  permissions: '0644'
  content: |
    <source>
      type tail
      format json
      time_key time
      path /varlog/containers/*.log
      pos_file /varlog/es-containers.log.pos
      time_format %Y-%m-%dT%H:%M:%S
      tag reform.*
      read_from_head true
    </source>

    <match reform.**>
      type record_reformer
      enable_ruby true
      tag kubernetes.${tag_suffix[3].split('-')[0..-2].join('-')}
    </match>

    <source>
      type tail
      format none
      path /varlog/monit.log
      pos_file /varlog/gcp-monit.log.pos
      tag monit
    </source>

    <source>
      type tail
      format none
      path /varlog/salt/minion
      pos_file /varlog/gcp-salt.pos
      tag salt
    </source>

    <source>
      type tail
      format none
      path /varlog/startupscript.log
      pos_file /varlog/es-startupscript.log.pos
      tag startupscript
    </source>

    <source>
      type tail
      format none
      path /varlog/docker.log
      pos_file /varlog/es-docker.log.pos
      tag docker
    </source>

    <source>
      type tail
      format none
      path /varlog/etcd.log
      pos_file /varlog/es-etcd.log.pos
      tag etcd
    </source>

    <source>
      type tail
      format none
      path /varlog/kubelet.log
      pos_file /varlog/es-kubelet.log.pos
      tag kubelet
    </source>

    <source>
      type tail
      format none
      path /varlog/kube-apiserver.log
      pos_file /varlog/es-kube-apiserver.log.pos
      tag kube-apiserver
    </source>

    <source>
      type tail
      format none
      path /varlog/kube-controller-manager.log
      pos_file /varlog/es-kube-controller-manager.log.pos
      tag kube-controller-manager
    </source>

    <source>
      type tail
      format none
      path /varlog/kube-scheduler.log
      pos_file /varlog/es-kube-scheduler.log.pos
      tag kube-scheduler
    </source>

    <match **>
       type elasticsearch
       log_level info
       include_tag_key true
       host "#{ENV['ELASTICSEARCH_LOGGING_SERVICE_HOST']}"
       port 9200
       logstash_format true
       # Set the chunk limit the same as for fluentd-gcp.
       buffer_chunk_limit 512K
       # Cap buffer memory usage to 512KB/chunk * 128 chunks = 65 MB
       buffer_queue_limit 128
       flush_interval 5s
       # Never wait longer than 2 minutes between retries.
       max_retry_wait 120
       # Disable the limit on the number of retries (retry forever).
       disable_retry_limit
    </match>
