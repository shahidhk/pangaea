#cloud-config

---
hostname: kumachine
coreos:
  etcd2:
    name: kumachine
    listen-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379

    initial-advertise-peer-urls: http://$private_ipv4:2380
    initial-cluster: kumachine=http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
  fleet:
    metadata: role=kumachine
    public-ip: $private_ipv4
  flannel:
    interface: $private_ipv4
  units:
  - name: etcd2.service
    command: start
  - name: fleet.service
    command: start
  - name: flanneld.service
    command: start
    drop-ins:
    - name: 50-network-config.conf
      content: |
        [Unit]
        Requires=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
  - name: setup-network-environment.service
    command: start
    content: |
      [Unit]
      Description=Write ip addresses of interfaces to environment file
      Documentation=https://github.com/kelseyhightower/setup-network-environment
      Requires=network-online.target
      After=network-online.target

      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
      ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
      ExecStart=/opt/bin/setup-network-environment
      RemainAfterExit=yes
      Type=oneshot
  - name: generate-credentials.service
    command: start
    content: |
      [Unit]
      Description=Generate keys for kubernetes
      Documentation=https://github.com/kubernetes/kubernetes/blob/master/cluster/saltbase/salt/generate-cert/make-ca-cert.sh
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      Environment="CERT_GROUP=root"
      EnvironmentFile=/etc/network-environment
      ExecStartPre=-/usr/bin/mkdir -p /opt/credentials
      ExecStartPre=/usr/bin/curl -L -o /opt/credentials/make-ca-cert.sh https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/saltbase/salt/generate-cert/make-ca-cert.sh
      ExecStartPre=/usr/bin/chmod +x /opt/credentials/make-ca-cert.sh
      {% if config['provider'] == 'vagrant' %}
      ExecStart=/bin/bash -c '/opt/credentials/make-ca-cert.sh $DEFAULT_IPV4 IP:10.0.0.1,IP:$ETH1_IPV4'
      {% elif config['provider'] == 'gce' %}
      ExecStart=/bin/bash -c '/opt/credentials/make-ca-cert.sh \
        $(curl -s -H Metadata-Flavor:Google http://metadata.google.internal./computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip) \
        IP:10.0.0.1,IP:$(curl -s -H Metadata-Flavor:Google http://metadata.google.internal./computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip)'
      {% endif %}
      RemainAfterExit=yes
      Type=oneshot
  - name: kube-binaries.service
    command: start
    content: |
      [Unit]
      Description=Download and link Kubernetes binaries
      Requires=network-online.target
      After=network-online.target

      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/curl -L -o /opt/kubernetes.tar.gz https://github.com/kubernetes/kubernetes/releases/download/v1.0.4/kubernetes.tar.gz
      ExecStartPre=/bin/tar -xzf /opt/kubernetes.tar.gz -C /opt/
      ExecStartPre=/bin/tar -xzf /opt/kubernetes/server/kubernetes-server-linux-amd64.tar.gz -C /opt/kubernetes/server/
      ExecStartPre=/bin/bash -c ' \
        echo "linking kubernetes binaries to /opt/bin" && \
        ln -s /opt/kubernetes/server/kubernetes/server/bin/kube-apiserver /opt/bin/kube-apiserver && \
        ln -s /opt/kubernetes/server/kubernetes/server/bin/kube-controller-manager /opt/bin/kube-controller-manager && \
        ln -s /opt/kubernetes/server/kubernetes/server/bin/kube-proxy /opt/bin/kube-proxy && \
        ln -s /opt/kubernetes/server/kubernetes/server/bin/kube-scheduler /opt/bin/kube-scheduler && \
        ln -s /opt/kubernetes/server/kubernetes/server/bin/kubelet /opt/bin/kubelet && \
        ln -s /opt/kubernetes/platforms/linux/amd64/kubectl /opt/bin/kubectl'
      ExecStart=/bin/bash -c ' \
        echo "setting executable flag on kubernetes binaries" && \
        /usr/bin/chmod +x /opt/bin/kube-apiserver && \
        /usr/bin/chmod +x /opt/bin/kube-controller-manager && \
        /usr/bin/chmod +x /opt/bin/kube-proxy && \
        /usr/bin/chmod +x /opt/bin/kube-scheduler && \
        /usr/bin/chmod +x /opt/bin/kubelet && \
        /usr/bin/chmod +x /opt/bin/kubectl'
      RemainAfterExit=yes
      Type=oneshot
  - name: kube-apiserver.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service etcd2.service generate-credentials.service kube-binaries.service
      After=setup-network-environment.service etcd2.service generate-credentials.service kube-binaries.service

      [Service]
      EnvironmentFile=/etc/network-environment
      ExecStartPre=/opt/bin/wupiao 127.0.0.1:2379/v2/machines
      ExecStart=/opt/bin/kube-apiserver \
      --runtime_config=api/v1 \
      --allow_privileged=true \
      --insecure_bind_address=0.0.0.0 \
      --insecure_port=8080 \
      --kubelet_https=true \
      --secure_port=6443 \
      --service-cluster-ip-range=10.0.0.0/16 \
      --etcd_servers=http://127.0.0.1:2379 \
      --bind-address=${DEFAULT_IPV4} \
      --logtostderr=true \
      --client-ca-file=/srv/kubernetes/ca.crt \
      --tls-cert-file=/srv/kubernetes/server.cert \
      --tls-private-key-file=/srv/kubernetes/server.key \
      --admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
      Restart=always
      RestartSec=10
  - name: kube-controller-manager.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service generate-credentials.service
      After=kube-apiserver.service generate-credentials.service

      [Service]
      ExecStart=/opt/bin/kube-controller-manager \
      --master=127.0.0.1:8080 \
      --logtostderr=true \
      --root-ca-file=/srv/kubernetes/ca.crt \
      --service-account-private-key-file=/srv/kubernetes/server.key
      Restart=always
      RestartSec=10
  - name: kube-scheduler.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service
      After=kube-apiserver.service

      [Service]
      ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
      Restart=always
      RestartSec=10
  - name: kube-proxy.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      # wait for kubernetes master to be up and ready
      ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
      ExecStart=/opt/bin/kube-proxy \
      --master=$private_ipv4:8080 \
      --logtostderr=true
      Restart=always
      RestartSec=10
  - name: kube-kubelet.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      EnvironmentFile=/etc/network-environment
      # wait for kubernetes master to be up and ready
      ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
      ExecStart=/opt/bin/kubelet \
      --address=0.0.0.0 \
      --port=10250 \
      --hostname_override=${DEFAULT_IPV4} \
      --api_servers=$private_ipv4:8080 \
      --allow_privileged=true \
      --logtostderr=true \
      --cluster-dns={{ config['kubernetes']['dns_server_ip'] }} \
      --cluster-domain=kubeapp \
      --healthz_bind_address=0.0.0.0 \
      --healthz_port=10248
      Restart=always
      RestartSec=10
write-files:
- path: /etc/conf.d/nfs
  permissions: '0644'
  # disable the nfs server
  content: |
    OPTS_RPC_MOUNTD=""
- path: /opt/bin/wupiao
  permissions: '0755'
  content: |
    #!/bin/bash
    # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
    [ -n "$1" ] && \
      until curl -o /dev/null -sIf http://${1}; do \
        sleep 1 && echo .;
      done;
    exit $?
- path: /opt/bin/ws
  permissions: '0755'
  content: |
    #!/bin/bash
    watch -n 1 systemctl status
- path: /opt/bin/wss
  permissions: '0755'
  content: |
    #!/bin/bash
    systemctl status
