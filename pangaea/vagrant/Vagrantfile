# -*- mode: ruby -*-
# # vi: set ft=ruby :

# https://github.com/coreos/coreos-vagrant Vagrantfile 841844d2e6c67ab2195209753caf613cb3916381
# https://github.com/coreos/coreos-kubernetes single-node/Vagrantfile 054f68ecab1e1bdf5cad7c635d462f018d0c11f4

require 'fileutils'

Vagrant.require_version ">= 1.6.0"

def rel_path(p)
  File.join File.dirname(__FILE__), p
end

NODE_IP = '172.17.6.101' # single node set up
USER_DATA_PATH = rel_path '../kubernetes/cloud-config.sh'

CONFIG = rel_path 'config.rb'
ROOT_PATH = rel_path '../..'

SSL_TARBALL_PATH = rel_path '../pki/keys/vagrant'
SSL_INIT_SCRIPT_PATH = rel_path '../pki/init-ssl'
if !File.exist?(SSL_TARBALL_PATH) then
    system(%Q(\
        mkdir -p "#{SSL_TARBALL_PATH}" && \
        "#{SSL_INIT_SCRIPT_PATH}" "#{SSL_TARBALL_PATH}" IP.1=10.3.0.1,IP.2=#{NODE_IP} && \
        cp "#{SSL_TARBALL_PATH}/controller.tar" "#{rel_path '../pki/keys/_CURRENT.tar'}"\
    )) or abort "failed generating SSL artifacts"
end

SETUP_ARCHIVE_PATH = rel_path '../../.tmp/setup.tar'
system(%Q(tar -cf "#{SETUP_ARCHIVE_PATH}" -C "#{rel_path '../..'}" .pangaea pangaea)) or abort "failed generating setup archive"

# Defaults for config options defined in CONFIG
$num_instances = 1
$instance_name_prefix = "km"
$update_channel = "stable"
$image_version = "current"
$enable_serial_logging = false
$share_home = false
$vm_gui = false
$vm_memory = 1024
$vm_cpus = 1
$shared_folders = {}
$forwarded_ports = {}

require CONFIG

Vagrant.configure("2") do |config|
  # always use Vagrants insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  if $image_version != "current"
      config.vm.box_version = $image_version
  end
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant_vmware_fusion.json" % [$update_channel, $image_version]
    end
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  (1..$num_instances).each do |i|
    config.vm.define vm_name = "%s%d" % [$instance_name_prefix, i] do |config|
      config.vm.hostname = vm_name

      if $enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), "log")
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        ["vmware_fusion", "vmware_workstation"].each do |vmware|
          config.vm.provider vmware do |v, override|
            v.vmx["serial0.present"] = "TRUE"
            v.vmx["serial0.fileType"] = "file"
            v.vmx["serial0.fileName"] = serialFile
            v.vmx["serial0.tryNoRxLoss"] = "FALSE"
          end
        end

        config.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      if $expose_docker_tcp
        config.vm.network "forwarded_port", guest: 2375, host: ($expose_docker_tcp + i - 1), auto_correct: true
      end

      $forwarded_ports.each do |guest, host|
        config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
      end

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        config.vm.provider vmware do |v|
          v.gui = $vm_gui
          v.vmx['memsize'] = $vm_memory
          v.vmx['numvcpus'] = $vm_cpus
        end
      end

      config.vm.provider :virtualbox do |vb|
        vb.gui = $vm_gui
        vb.memory = $vm_memory
        vb.cpus = $vm_cpus
      end

      ip = "172.17.6.#{i+100}"
      config.vm.network :private_network, ip: ip

      $shared_folders[ROOT_PATH] = '/pangaea'

      # nfs over udp causes writes to hang on coreos guest and ubuntu host
      nfs_options = {
          nfs: true,
          mount_options: ['nolock,vers=3,tcp'],
          linux__nfs_options: %w(rw async no_subtree_check no_root_squash no_all_squash anonuid=0 anongid=0)
      }

      $shared_folders.each_with_index do |(host_folder, guest_folder), index|
        config.vm.synced_folder host_folder.to_s, guest_folder.to_s, nfs_options.merge({id: "core-share%02d" % index})
      end

      if $share_home
        config.vm.synced_folder ENV['HOME'], ENV['HOME'], nfs_options.merge({id: "home"})
      end

      # provision coreos machine
      config.vm.provision :file, :source => SETUP_ARCHIVE_PATH, :destination => "/tmp/setup.tar"

      config.vm.provision :file, :source => USER_DATA_PATH, :destination => "/tmp/vagrantfile-user-data"
      config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true

    end
  end
end

