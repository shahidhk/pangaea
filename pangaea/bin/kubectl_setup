#!/bin/bash

set -e

SCRIPT_DIR=$(dirname "$0")

source "$SCRIPT_DIR/pan_root" # set PAN_ROOT
source "$PAN_ROOT/.pangaea"   # options

LIST_JSON=$PAN_ROOT/.tmp/ip_information.json
KUBE_NODE= # kubernetes apiserver
KUBE_NAME= # name for kubectl setup

function get_apiserver_ip() {
  if [ $PROVIDER = gce ]; then
    gcloud --project $GCE_PROJECT_ID compute instances list --format json > "$LIST_JSON"
    KUBE_NODE=$(cat "$LIST_JSON" | jq -r '.[] | select(.name=="'"$GCE_INSTANCE_NAME"'").networkInterfaces[0].accessConfigs[0].natIP')
    KUBE_NODE=https://$KUBE_NODE
    KUBE_NAME=$GCE_INSTANCE_NAME
  elif [ $PROVIDER = azure ]; then
    azure network public-ip show "$AZURE_NAME" "$AZURE_NAME-pubip" --json > "$LIST_JSON"
    KUBE_NODE=https://$(cat "$LIST_JSON" | jq -r '.ipAddress')
    KUBE_NAME=$AZURE_NAME
  else
    KUBE_NODE=https://127.0.0.1:1443
    KUBE_NAME=vagrant
  fi
}
get_apiserver_ip

KUBE_PKI=$PAN_ROOT/pangaea/pki/keys/$KUBE_NAME

kubectl config set-cluster $KUBE_NAME \
  --server=$KUBE_NODE \
  --certificate-authority="$KUBE_PKI/ca.pem"
kubectl config set-credentials $KUBE_NAME \
  --certificate-authority="$KUBE_PKI/ca.pem" \
  --client-key="$KUBE_PKI/admin-key.pem" \
  --client-certificate="$KUBE_PKI/admin.pem"
kubectl config set-context $KUBE_NAME --cluster=$KUBE_NAME --user=$KUBE_NAME
kubectl config use-context $KUBE_NAME

echo "Configured kubectl to work with $KUBE_NAME"
